{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "ONTAP Cloud Single - Cloud Manager 3.2",

    "Parameters": {
        "CompanyName": {
            "Type": "String",
            "MinLength": "4",
            "Description": "Company name",
            "MaxLength": "35",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9_]*",
            "ConstraintDescription" : "Must start with alphabetic character and contains only numbers, letters or underscore (_) and up to 35 characters"
        },
        "VPCId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Target VPC for CloudManager and ONTAP Cloud"
        },
        "SubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "SubnetID for ONTAP Cloud"
        },
        "KeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "CloudManager instance will be launched with this KeyPair"
        },
        "CloudManagerUserEmail": {
            "Type": "String",
            "Description": "Email address will be used to login to Cloud Manager"
        },
        "CloudManagerPassword": {
            "Type": "String",
            "Description": "Password will be used to login to Cloud Manager and ONTAP Cloud",
            "NoEcho": "true",
            "MinLength": "4",
            "MaxLength": "20",
            "ConstraintDescription": "Password Min length is 4 and max length is 20"
        },
        "RemoteAccessCIDR" : {
            "Description" : "CloudManager web access will be allowed from this CIDR range (example for full access: 0.0.0.0/0)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",            
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "Must be a valid CIDR range of the form x.x.x.x/x."
        },
        "AUniqueName": {
            "Type": "String",
            "Description": "A unique name to be used to identify the AWS resources deployed as part of this template (i.e. use the StackName)"
        }
    },

    "Mappings": {
      "AWSAMIRegionMap": {
        "AMI": {
          "NETAPPOCCM": "OnCommandCloudManager-3.2.0-Marketplace- 06/02/2017_105843-d9adb18b-c57c-4615-9bb7-a9c64efd69b1-ami-d45094c2.3"
        },
        "ap-northeast-1": {
          "NETAPPOCCM": "ami-21abeb46"
        },
        "ap-northeast-2": {
          "NETAPPOCCM": "ami-1e61b070"
        },
        "ap-south-1": {
          "NETAPPOCCM": "ami-08443567"
        },
        "ap-southeast-1": {
          "NETAPPOCCM": "ami-432e9a20"
        },
        "ap-southeast-2": {
          "NETAPPOCCM": "ami-d8aaacbb"
        },
        "ca-central-1": {
          "NETAPPOCCM": "ami-f8b8059c"
        },
        "eu-central-1": {
          "NETAPPOCCM": "ami-b7c20ad8"
        },
        "eu-west-1": {
          "NETAPPOCCM": "ami-8dd7f2eb"
        },
        "eu-west-2": {
          "NETAPPOCCM": "ami-6f73660b"
        },
        "sa-east-1": {
          "NETAPPOCCM": "ami-b0c3a7dc"
        },
        "us-east-1": {
          "NETAPPOCCM": "ami-6c65a27a"
        },
        "us-east-2": {
          "NETAPPOCCM": "ami-4811342d"
        },
        "us-west-1": {
          "NETAPPOCCM": "ami-e63a6686"
        },
        "us-west-2": {
          "NETAPPOCCM": "ami-68e96c08"
        }
      }
    },

    "Resources": {
        "OCCMInstanceIAMRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                "Statement": [{
                    "Action": [ "sts:AssumeRole" ],
                    "Effect": "Allow",
                    "Principal": { "Service": [ "ec2.amazonaws.com" ] }
                }],
                "Version": "2012-10-17"
            },
            "Path": "/",
            "Policies": [{
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                              "ec2:DescribeInstances",
                              "ec2:DescribeInstanceStatus",
                              "ec2:RunInstances",
                              "ec2:ModifyInstanceAttribute",
                              "ec2:DescribeRouteTables",
                              "ec2:DescribeImages",
                              "ec2:CreateTags",
                              "ec2:CreateVolume",
                              "ec2:DescribeVolumes",
                              "ec2:ModifyVolumeAttribute",
                              "ec2:DeleteVolume",
                              "ec2:CreateSecurityGroup",
                              "ec2:DeleteSecurityGroup",
                              "ec2:DescribeSecurityGroups",
                              "ec2:RevokeSecurityGroupEgress",
                              "ec2:AuthorizeSecurityGroupEgress",
                              "ec2:AuthorizeSecurityGroupIngress",
                              "ec2:CreateNetworkInterface",
                              "ec2:DescribeNetworkInterfaces",
                              "ec2:DeleteNetworkInterface",
                              "ec2:ModifyNetworkInterfaceAttribute",
                              "ec2:DescribeSubnets",
                              "ec2:DescribeVpcs",
                              "ec2:DescribeDhcpOptions",
                              "ec2:CreateSnapshot",
                              "ec2:DeleteSnapshot",
                              "ec2:DescribeSnapshots",
                              "ec2:GetConsoleOutput",
                              "ec2:DescribeKeyPairs",
                              "ec2:DescribeRegions",
                              "ec2:DeleteTags",
                              "ec2:DescribeTags",
                              "cloudformation:CreateStack",
                              "cloudformation:DeleteStack",
                              "cloudformation:DescribeStacks",
                              "cloudformation:DescribeStackEvents",
                              "cloudformation:ValidateTemplate",
                              "iam:PassRole",
                              "iam:CreateRole",
                              "iam:DeleteRole",
                              "iam:PutRolePolicy",
                              "iam:CreateInstanceProfile",
                              "iam:DeleteRolePolicy",
                              "iam:AddRoleToInstanceProfile",
                              "iam:RemoveRoleFromInstanceProfile",
                              "iam:DeleteInstanceProfile",
                              "kms:List*",
                              "kms:Describe*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:StartInstances",
                                "ec2:StopInstances",
                                "ec2:TerminateInstances",
                                "ec2:AttachVolume",
                                "ec2:DetachVolume"
                            ],
                            "Condition": {
                                "StringLike": {
                                    "ec2:ResourceTag/WorkingEnvironment": "*"
                                }
                            },
                            "Resource": [
                                "arn:aws:ec2:*:*:instance/*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AttachVolume",
                                "ec2:DetachVolume"
                            ],
                            "Resource": [
                                "arn:aws:ec2:*:*:volume/*"
                            ]
                        }
                    ]
                },
                "PolicyName": {"Fn::Join": [ "", [ { "Ref": "AUniqueName" }, "-OCCMPolicy" ] ]}
            }]
          },
          "Type": "AWS::IAM::Role"
        },

        "OCCMInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [{ "Ref": "OCCMInstanceIAMRole" } ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },

        "OCCMSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Default group for NetApp CloudManager",
                "VpcId": {
                    "Ref": "VPCId"
                },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": { "Ref": "RemoteAccessCIDR" } },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": { "Ref": "RemoteAccessCIDR" } },
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "RemoteAccessCIDR" } }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Join": [ "", [ { "Ref": "AUniqueName" }, "-SG" ] ]}
                    }
                ]
            }
        },			
      
		"OTCCompleteHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "OTCSetupCompleteCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "OCCMInstance",
            "Properties" : {
                 "Handle"  : { "Ref" : "OTCCompleteHandle" },
                 "Timeout" : "2400",
                 "Count"   : "1"
            }
        },

        "OTCCompleteHandle2" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "OTCSetupCompleteCondition2" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "OCCMInstance",
            "Properties" : {
                 "Handle"  : { "Ref" : "OTCCompleteHandle2" },
                 "Timeout" : "2400",
                 "Count"   : "1"
            }
        },

        "OTCCompleteHandle3" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "OTCSetupCompleteCondition3" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "OCCMInstance",
            "Properties" : {
                 "Handle"  : { "Ref" : "OTCCompleteHandle3" },
                 "Timeout" : "2400",
                 "Count"   : "1"
            }
        },
      
        "OCCMInstance": {
            "DependsOn": [
                "OCCMSecurityGroup", "OCCMInstanceProfile"
            ],
            "Type": "AWS::EC2::Instance",            
            "Properties": {
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [ "AWSAMIRegionMap", { "Ref": "AWS::Region" }, "NETAPPOCCM" ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "True",
                        "DeleteOnTermination": "True",
                        "SubnetId": { "Ref": "SubnetId" }, "DeviceIndex": "0",
                        "GroupSet": [ { "Ref": "OCCMSecurityGroup" } ] }
                ],
                "InstanceType": "t2.medium",
                "IamInstanceProfile": { "Ref": "OCCMInstanceProfile" },
                "KeyName": { "Ref": "KeyPair" },
                "Monitoring": "false", 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
                                "sudo -s",
                                "export PATH=$PATH:/usr/local/aws/bin/",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                                "# Helper function",
                                "function waitForAction",
                                "{",
                                "  curl http://localhost/occm/api/audit?workingEnvironmentId=${1} -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt | jq -r .[${3}].status > /tmp/temp.txt",
                                "  test=`cat /tmp/temp.txt`",
                                "if [ ${test} = null ] ; then",
                                    "sleep ${2}",
                                    "waitForAction ${1} ${2} ${3}",
                                "fi",
                                "  while [ ${test} = Received ] || [ ${test} = null ] ; do sleep ${2};curl http://localhost/occm/api/audit?workingEnvironmentId=${1} -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt | jq -r .[${3}].status > /tmp/temp.txt;test=`cat /tmp/temp.txt`; done",
                                "if [ ${test} = Failed ] ; then",
                                "  curl http://localhost/occm/api/audit?workingEnvironmentId=${1} -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt | jq -r .[${3}] > /tmp/temp.txt",
                                "  errorMessage=`cat /tmp/temp.txt| jq -r .errorMessage`",
                                "  actionName=`cat /tmp/temp.txt| jq -r .actionName`",
                                "  cfn-signal -e 1 -r \"Action: $actionName failed due to: $errorMessage\" --region ${region} ${otcTemplateHandle}",
                                "  exit 1",
                                "fi",
                                "}",
                                {"Fn::Join": [ "", [ "name=", { "Ref": "AUniqueName" } ] ]},
                                {"Fn::Join": [ "", [ "customer=", { "Ref": "CompanyName" } ] ]},
                                {"Fn::Join": [ "", [ "vpcID=", { "Ref": "VPCId" } ] ]},
                                {"Fn::Join": [ "", [ "subnetID=", { "Ref": "SubnetId" } ] ]},
                                {"Fn::Join": [ "", [ "region=", { "Ref": "AWS::Region" } ] ]},
                                {"Fn::Join": [ "", [ "adminEmail=", { "Ref": "CloudManagerUserEmail" } ] ]},
                                {"Fn::Join": [ "", [ "adminPassword=", { "Ref": "CloudManagerPassword" } ] ]},
                                {"Fn::Join": [ "", [ "svmPassword=", { "Ref": "CloudManagerPassword" } ] ]},
                                {"Fn::Join": [ "", [ "otcTemplateHandle=", { "Fn::Base64": { "Ref": "OTCCompleteHandle" } } ] ]},
                                {"Fn::Join": [ "", [ "otcTemplateHandle2=", { "Fn::Base64": { "Ref": "OTCCompleteHandle2" } } ] ]},
                                {"Fn::Join": [ "", [ "otcTemplateHandle3=", { "Fn::Base64": { "Ref": "OTCCompleteHandle3" } } ] ]},
                                "wget -O /usr/bin/jq http://stedolan.github.io/jq/download/linux64/jq",
                                "sleep 5",
                                "chmod +x /usr/bin/jq",
                                "dataAccessCidr=`aws ec2 describe-subnets --region $region --subnet-id $subnetID | jq -r '.Subnets[0].CidrBlock'`",								
                                "sleep 60",
                                "## Setup Cloud Manager",
                                "curl http://localhost/occm/api/occm/setup/init -X POST --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --data '{ \"proxyUrl\": { \"uri\": \"\" }, \"userRequest\":{  \"email\": \"'${adminEmail}'\",\"lastName\": \"admin\", \"firstName\":\"admin\",\"accessKey\": \"nokeys\",\"roleId\": \"Role-1\",\"secretKey\": \"nokeys\",\"password\": \"'${adminPassword}'\"  }, \"site\": \"'${customer}_site'\", \"company\": \"'${customer}'\",\"tenantRequest\": { \"name\": \"'${customer}_tenant'\", \"description\": \"\", \"costCenter\": \"\", \"nssKeys\": {} }}'",
                                "sleep 40",
                                "until sudo wget http://localhost/occmui > /dev/null 2>&1; do sudo wget http://localhost > /dev/null 2>&1 ; done",
                                "sleep 60",
                                "## Authenticate to Cloud Manager",
                                "curl http://localhost/occm/api/auth/login --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --data '{\"email\":\"'${adminEmail}'\",\"password\":\"'${adminPassword}'\"}' --cookie-jar cookies.txt",
                                "sleep 5",
                                "## Get the Tenant ID so we can create the ONTAP Cloud system in that Cloud Manager Tenant",
                                "tenantId=`curl http://localhost/occm/api/tenants -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt | jq -r .[0].publicId`",
                                "## Create a ONTAP Cloud working env",
                                "name=$(tr '-' '_' <<< ${name:0:30})",
                                "curl http://localhost/occm/api/vsa/working-environments -X POST --cookie cookies.txt --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --data '{\"name\":\"'${name}_OTC'\",\"tenantId\":\"'${tenantId}'\",\"region\":\"'${region}'\",\"subnetId\":\"'${subnetID}'\",\"ebsVolumeType\":\"gp2\",\"ebsVolumeSize\": {\"size\": 1, \"unit\": \"TB\"},\"dataEncryptionType\":\"AWS\",\"ontapEncryptionParameters\":null,\"skipSnapshots\": \"true\",\"svmPassword\":\"'${svmPassword}'\",\"vpcId\":\"'${vpcID}'\",\"vsaMetadata\":{\"platformLicense\":null,\"ontapVersion\":\"latest\",\"useLatestVersion\": true,\"licenseType\":\"cot-standard-paygo\",\"instanceType\":\"r4.xlarge\"}}' > /tmp/createVSA.txt",
                                "sourceVsaPublicId=`cat /tmp/createVSA.txt| jq -r .publicId`",
                                "if [ ${sourceVsaPublicId} = null ] ; then",
                                "  message=`cat /tmp/createVSA.txt| jq -r .message`",
                                "  cfn-signal -e 1 -r \"$message\" --region ${region} ${otcTemplateHandle}",
                                "  exit 1",
                                "fi",
                                "sleep 2",
                                "## Check SRC VSA",
                                "waitForAction ${sourceVsaPublicId} 60 1",
                                "## grab the Cluster managment LIF IP address",
                                "clusterLif=`curl 'http://localhost/occm/api/vsa/working-environments/'${sourceVsaPublicId}'?fields=clusterProperties' -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt |jq -r .clusterProperties.lifs |grep \"Cluster Management\" -a2|head -1|cut -f4 -d '\"'`",
                                "clusterLIF=`echo \"${clusterLif}\"`",
                                "cfn-signal -d \"${clusterLIF}\" -i ClusterLif --region ${region} ${otcTemplateHandle2}",
                                "## grab the iSCSI data LIF IP address",
                                "dataLif=`curl 'http://localhost/occm/api/vsa/working-environments/'${sourceVsaPublicId}'?fields=clusterProperties' -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt |jq -r .clusterProperties.lifs |grep iscsi -a4|head -1|cut -f4 -d '\"'`",
                                "iscsiLIF=`echo \"${dataLif}\"`",
                                "## Signal that the OTC setup is completed",
                                "cfn-signal -d \"${iscsiLIF}\" -i IscsiLif --region ${region} ${otcTemplateHandle}",
                                "## grab the NFS and CIFS data LIF IP address",
                                "dataLif2=`curl 'http://localhost/occm/api/vsa/working-environments/'${sourceVsaPublicId}'?fields=clusterProperties' -X GET --header 'Content-Type:application/json' --header 'Referer:AWSQS1' --cookie cookies.txt |jq -r .clusterProperties.lifs |grep nfs -a4|head -1|cut -f4 -d '\"'`",
                                "nasLIF=`echo \"${dataLif2}\"`",
                                "## Signal that the OTC setup is completed",
                                "cfn-signal -d \"${nasLIF}\" -i NasLif --region ${region} ${otcTemplateHandle3}\n"
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Join": [ "", [ { "Ref": "AUniqueName" }, "_CloudManager" ] ]}
                    },
                    {
                        "Key": "CloudFormation Stack",
                        "Value": { "Ref": "AWS::StackName" }
                    }
                ]
            }
        }
    },
   
    "Outputs": {
        "OCCMInstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": { "Ref": "OCCMInstance" }
        },
        "OCCMInstanceProfile": {
            "Description": "Instance profile used by CloudManager",
            "Value": { "Ref": "OCCMInstanceProfile" }
        },
        "CloudManagerURL" : {
            "Value" : {"Fn::Join": [ "", [ "http://", { "Fn::GetAtt" : [ "OCCMInstance", "PublicIp" ]} ] ]},
            "Description" : "CloudManager URL"
        },
        "ONTAPCloudSvmName" : {
            "Value" : {"Fn::Join": [ "", [ "svm_", {"Fn::Join": [ "", [ { "Ref": "AUniqueName" }, "_OTC" ] ]} ] ]},
            "Description" : "ONTAP Cloud SVM Name"
        },
        "IscsiDataLif" : {
            "Value" : { "Fn::GetAtt" : [ "OTCSetupCompleteCondition", "Data" ] }, 
            "Description" : "IP address of the iSCSI Data LIF"
        },
        "ClusterManagementLif" : {
            "Value" : { "Fn::GetAtt" : [ "OTCSetupCompleteCondition2", "Data" ] }, 
            "Description" : "IP address of the Cluster Management LIF" 
        },
        "NasDataLif" : {
            "Value" : { "Fn::GetAtt" : [ "OTCSetupCompleteCondition3", "Data" ] }, 
            "Description" : "IP address of the NAS Data LIF" 
        }          
    }
}